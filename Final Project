from openai import OpenAI
import time
import tkinter as tk
from tkinter import scrolledtext

client = OpenAI(api_key="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")
ASSISTANT_ID = "asst_vJ36o3cI1KmaUrznlW66zKZh"

# Function to wait for the run to complete (from your existing code)
def wait_on_run(run, thread):
    while run.status == "queued" or run.status == "in_progress":
        run = client.beta.threads.runs.retrieve(
            thread_id=thread.id,
            run_id=run.id,
        )
        time.sleep(0.5)
    return run

# Function to send message and receive response from OpenAI (integrated with GUI)
def send_message():
    user_message = entry_field.get("1.0", tk.END).strip()
    if user_message:
        # Add user message to conversation history in GUI
        conversation_history.config(state=tk.NORMAL)
        conversation_history.insert(tk.END, "You: " + user_message + "\n")
        conversation_history.yview(tk.END)

        # Existing logic to send user's input to the assistant
        client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=user_message
        )

        # Existing logic to run the assistant and wait for response (modified for GUI)
        run = client.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID
        )
        run = wait_on_run(run, thread)

        # Displaying AI's response in GUI
        messages = client.beta.threads.messages.list(thread_id=thread.id)
        latest_message = messages.data[0].content[0].text.value
        conversation_history.insert(tk.END, latest_message)
        conversation_history.yview(tk.END)
        
        conversation_history.config(state=tk.DISABLED)

    # Clear the entry field in GUI
    entry_field.delete("1.0", tk.END)

# Function to exit application
def exit_application():
    root.destroy()

# Start a new conversation thread (from existing code)
thread = client.beta.threads.create()

# Creating the GUI window
root = tk.Tk()
root.title("LIGN 101 Practice Problem Generator")

# GUI elements with enhanced styling
conversation_history = scrolledtext.ScrolledText(root, state=tk.DISABLED, font=("Helvetica", 10))
conversation_history.grid(row=0, column=0, columnspan=2, sticky="nsew", padx=10, pady=10)

entry_field = tk.Text(root, height=3, font=("Helvetica", 10))
entry_field.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
entry_field.focus()  # Set focus to the entry field

send_button = tk.Button(root, text="Send", command=send_message, bg="light grey", font=("Helvetica", 12))
send_button.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)

exit_button = tk.Button(root, text="Exit", command=exit_application, bg="light grey", font=("Helvetica", 12))
exit_button.grid(row=2, column=0, columnspan=2, sticky="nsew", padx=10, pady=10)

# Configure grid rows and columns
root.grid_rowconfigure(0, weight=1)  # Makes the conversation history expandable
root.grid_rowconfigure(1, weight=0)  # Keeps the entry field and send button fixed in size
root.grid_rowconfigure(2, weight=0)  # Keeps the exit button fixed in size
root.grid_columnconfigure(0, weight=1)  # Allows the first column to expand
root.grid_columnconfigure(1, weight=0)  # Keeps the second column fixed in size

# Running the GUI application
root.mainloop()
